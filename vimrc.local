" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

"  shenopkss.vim config {
    " set <leader>
    let mapleader=";"
    " 设置快捷键将系统剪贴板内容粘贴至 vim"
    vnoremap <Leader>y "+y
    nmap <Leader>p "+p
    " 定义快捷键关闭当前分割窗口
    nmap <Leader>q :q<CR>
    " 定义快捷键保存当前窗口内容
    nmap <Leader>w :w<CR>
    " 定义快捷键保存所有窗口内容并退出 vim
    nmap <Leader>WQ :wa<CR>:q<CR>
    " 不做任何保存，直接退出 vim
    nmap <Leader>Q :qa!<CR>
    nnoremap <silent> <leader>tt :TagbarToggle<CR>

    " 依次遍历子窗口
    nnoremap nw <C-W><C-W>"

    noremap <Leader>' vi'
    noremap <Leader>" vi"
    noremap <Leader>( vi(
    noremap <Leader>[ vi[
    noremap <Leader>{ vi{

    noremap <Leader>y "9y
    noremap <Leader>p "9p

    " autoload .vimrc
    autocmd! BufWritePost $MYVIMRC.local source $MYVIMRC
    autocmd! BufWritePost $MYVIMRC.bundles.local source $MYVIMRC

    " open vimrc
    nnoremap <leader>vi :vsplit $MYVIMRC.local<cr>
    nnoremap <leader>vib :vsplit $MYVIMRC.bundles.local<cr>
    au FileType php setlocal dict+=~/.vim/dict/php_funclist.txt

    set t_Co=256
    "colorscheme Dracula
    let g:molokai_original = 1
    let g:rehash256 = 1
    colorscheme molokai

    set mouse=
    set nofoldenable

    nmap <S-TAB> :bp<CR>
    nmap <Leader><TAB> :bn<CR>
    nmap <Leader>bd :bd<CR>
    set nofoldenable

    " 行尾添加符号
    nmap <Leader>; $a;<esc>
    nmap <Leader>, $a,
    nmap <Leader>= $a => 
    nmap <Leader>: $a : 
    nmap <Leader>{ $a{ 
    nmap <Leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
    nmap zz ^lzf%<esc>

" }
" Plugins {
    " NerdTree {
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            let NERDTreeWinPos='righ'
            " NERDTree 子窗口中不显示冗余帮助信息
            let NERDTreeMinimalUI=1
            let NERDTreeShowLineNumbers=1
        endif
    " }
    " EasyMotion {
        let g:EasyMotion_do_mapping = 0 " Disable default mappings

        " Bi-directional find motion
        " " Jump to anywhere you want with minimal keystrokes, with just one
        " key binding.
        " " `s{char}{label}`
        nmap s <Plug>(easymotion-s)
        " " or
        " " `s{char}{char}{label}`
        " " Need one more keystroke, but on average, it may be more
        " comfortable.
        nmap S <Plug>(easymotion-s2)
        "
        " " Turn on case insensitive feature
        let g:EasyMotion_smartcase = 1
        "
        " " JK motions: Line motions
        map <Leader>j <Plug>(easymotion-j)
        map <Leader>k <Plug>(easymotion-k)
        map  \ <Plug>(easymotion-sn)
        omap \ <Plug>(easymotion-tn)
        "map  n <Plug>(easymotion-next)
        "map  N <Plug>(easymotion-prev)
    " }
    " Fugitive deep git integration {
        nmap <leader>gs :Gstatus<cr>
        nmap <leader>gd :Gdiff<cr>
        nmap <leader>gc :Gcommit<cr>
        nmap <leader>gb :Gblame<cr>
        nmap <leader>gl :Glog<cr>
        nmap <leader>gp :Git push<cr>

    "}
    " EasyGrep {
        let g:EasyGrepMode = 2     " All:0, Open Buffers:1, TrackExt:2, 
        let g:EasyGrepCommand = 0  " Use vimgrep:0, grepprg:1
        let g:EasyGrepRecursive  = 1 " Recursive searching
        let g:EasyGrepIgnoreCase = 1 " not ignorecase:0
        let g:EasyGrepFilesToExclude = "*.bak, *~, cscope.*, *.a, *.o, *.pyc, *.bak, *.log, *.cache"
    "}
    " Tabularize {
        nmap <Leader>a= :Tabularize /=<cr>
        nmap <Leader>a> :Tabularize /=><cr>
        nmap <Leader>a: :Tabularize /:<cr>
        nmap <Leader>a:: :Tabularize /:\zs<cr>
        nmap <Leader>a, :Tabularize /,<cr>
        nmap <Leader>a<Bar> :Tabularize /<cr>

    " }
" }

